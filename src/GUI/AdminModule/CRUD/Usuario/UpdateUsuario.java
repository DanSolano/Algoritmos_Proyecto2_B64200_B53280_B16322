/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.AdminModule.CRUD.Usuario;

import Data.CargaDatos;
import Domain.Usuario;
import GUI.AdminModule.AdminModule;
import Utilities.StringMD;
import com.mxrck.autocompleter.TextAutoCompleter;
import java.util.LinkedList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author daniel
 */
public class UpdateUsuario extends javax.swing.JFrame {

    private LinkedList<Usuario> usuarios;

    private TextAutoCompleter textAutocompleter;
    private int indexUser;

    /**
     * Creates new form CreateClient
     */
    public UpdateUsuario() {
        initComponents();
        this.indexUser = -1;
        this.usuarios = CargaDatos.USUARIOS;

        jbUpdate.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtfId = new javax.swing.JTextField();
        jtfName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtfUsuario = new javax.swing.JTextField();
        jbUpdate = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jlError = new javax.swing.JLabel();
        jbSearch = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jpfPass = new javax.swing.JPasswordField();
        jpfPassB = new javax.swing.JPasswordField();
        jcRol = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Actualizar Informacion de Administrador");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Nombre:");

        jLabel2.setText("Usuario");

        jtfId.setEditable(false);

        jLabel3.setText("Id");

        jbUpdate.setText("Actualizar");
        jbUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbUpdateActionPerformed(evt);
            }
        });

        jButton2.setText("Volver");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jlError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlError.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jbSearch.setText("Buscar");
        jbSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSearchActionPerformed(evt);
            }
        });

        jLabel5.setText("Confirmar Contraseña");

        jLabel4.setText("Contraseña");

        jpfPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jpfPassKeyReleased(evt);
            }
        });

        jpfPassB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jpfPassBKeyReleased(evt);
            }
        });

        jcRol.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione un  Rol", "Administrador", "Operador" }));
        jcRol.setToolTipText("");

        jDesktopPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jtfId, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jtfName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jtfUsuario, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jbUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jButton2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jlError, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jbSearch, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jpfPass, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jpfPassB, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jcRol, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jpfPassB, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                            .addComponent(jLabel1)
                                            .addGap(28, 28, 28)
                                            .addComponent(jtfName, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addGap(29, 29, 29)
                                            .addComponent(jtfId, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addGap(18, 18, 18)
                                            .addComponent(jpfPass, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addGap(28, 28, 28)
                                            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jcRol, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jtfUsuario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE))))
                                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                        .addGap(144, 144, 144)
                                        .addComponent(jbSearch)))
                                .addGap(3, 3, 3)))
                        .addGap(0, 56, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(jButton2)
                .addGap(119, 119, 119)
                .addComponent(jbUpdate)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtfUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(jcRol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbSearch)
                .addGap(18, 18, 18)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtfId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jpfPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jpfPassB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(jlError, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbUpdate)
                    .addComponent(jButton2))
                .addGap(78, 78, 78))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        back();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jbUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbUpdateActionPerformed
        String pass = new String(jpfPass.getPassword()).trim();
        String passB = new String(jpfPassB.getPassword()).trim();

        Usuario u = this.usuarios.get(this.indexUser);

        String newNombre = jtfName.getText().trim();
        String newRol = jcRol.getSelectedItem().toString();
        String newUsuario = jtfUsuario.getText().trim();
        String oldNombre = u.getNombre();
        String oldRole = u.getRol();
        String oldUsuario = u.getUsuario();

        if (pass.isEmpty() && passB.isEmpty()) {//validate passwordfield are not modified
            if (exist(newUsuario, newRol) && (!newUsuario.equals(oldUsuario))) {
                System.out.println("0");
                jlError.setText("El usuario ya se encuentra registrado.");
            } else if (exist(newUsuario, newRol) && !newUsuario.isEmpty() && newUsuario.equals(oldUsuario)) {
                System.out.println("1");
                u.setNombre(newNombre);
                this.usuarios.set(this.indexUser, u);
                clearFields();
            } else if (!exist(newUsuario, newRol) && !newUsuario.isEmpty()) {
                System.out.println("1.5 " + newUsuario);
                u.setNombre(newNombre);
                u.setUsuario(newUsuario);
                u.setRol(newRol);
                this.usuarios.set(this.indexUser, u);
                clearFields();
            } else {
                System.out.println("2  " + newUsuario + " - " + oldUsuario);
                jlError.setText("Debe ingresar todos los datos.");
            }
        } else if (!pass.isEmpty() && !passB.isEmpty()) {//validate passwordfield are modified
            System.out.println("3" + pass + "");
            if (!pass.equals(passB)) {
                System.out.println("4");
                jlError.setText("Las contraseñas no  coinciden.");
            } else {
                if (exist(newUsuario, newRol) && (!newUsuario.equals(oldUsuario))) {
                    System.out.println("3.0");
                    jlError.setText("El usuario ya se encuentra registrado.");
                } else if (exist(newUsuario, newRol) && !newUsuario.isEmpty() && newUsuario.equals(oldUsuario)) {
                    System.out.println("3.1");
                    u.setNombre(newNombre);

                    u.setContraseña(StringMD.getStringMessageDigest(pass, StringMD.SHA512));
                    this.usuarios.set(this.indexUser, u);
                    clearFields();
                } else if (!exist(newUsuario, newRol) && !newUsuario.isEmpty()) {
                    System.out.println("3.1.5 " + newUsuario);
                    u.setNombre(newNombre);
                    u.setUsuario(newUsuario);
                    u.setRol(newRol);
                    u.setContraseña(pass);
                    this.usuarios.set(this.indexUser, u);
                    clearFields();
                } else {
                    System.out.println("2  " + newUsuario + " - " + oldUsuario);
                    jlError.setText("Debe ingresar todos los datos.");
                }
            }

        }


    }//GEN-LAST:event_jbUpdateActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        back();
    }//GEN-LAST:event_formWindowClosing

    private void jbSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSearchActionPerformed
        searchUser();
    }//GEN-LAST:event_jbSearchActionPerformed

    private void jpfPassKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jpfPassKeyReleased
        String pass = StringMD.getStringMessageDigest(new String(jpfPass.getPassword()).trim(), StringMD.SHA512);
        String passB = StringMD.getStringMessageDigest(new String(jpfPassB.getPassword()).trim(), StringMD.SHA512);
        if (pass.equals(passB)) {
            jlError.setText("Contraseña CORRECTA.");
            jbUpdate.setEnabled(true);

        } else {
            jlError.setText("Contraseña debe ser igual.");
            jbUpdate.setEnabled(false);
        }
    }//GEN-LAST:event_jpfPassKeyReleased

    private void jpfPassBKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jpfPassBKeyReleased
        String pass = StringMD.getStringMessageDigest(new String(jpfPass.getPassword()).trim(), StringMD.SHA512);
        String passB = StringMD.getStringMessageDigest(new String(jpfPassB.getPassword()).trim(), StringMD.SHA512);
        if (pass.equals(passB)) {
            jlError.setText("Contraseña CORRECTA.");
            jbUpdate.setEnabled(true);

        } else {
            jlError.setVisible(true);
            jlError.setText("Contraseña debe ser igual.");
            jbUpdate.setEnabled(false);
        }
    }//GEN-LAST:event_jpfPassBKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton jbSearch;
    private javax.swing.JButton jbUpdate;
    private javax.swing.JComboBox<String> jcRol;
    private javax.swing.JLabel jlError;
    private javax.swing.JPasswordField jpfPass;
    private javax.swing.JPasswordField jpfPassB;
    private javax.swing.JTextField jtfId;
    private javax.swing.JTextField jtfName;
    private javax.swing.JTextField jtfUsuario;
    // End of variables declaration//GEN-END:variables

    /**
     * isMail evaluate if the String is an email.
     *
     * @param email email received the string input the text field for email
     * @return true if the String is a email and false if the String is not an
     * email
     */
    private boolean isMail(String email) {
        // Patrón para validar el email
        Pattern pattern = Pattern
                .compile("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
                        + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");

        Matcher mather = pattern.matcher(email);

        if (mather.find() == true) {
            return true;

        } else {
            return false;
        }
    }

    private void back() {
        CargaDatos.USUARIOS = this.usuarios;
        this.dispose();
        AdminModule adminModule = new AdminModule();
        adminModule.setVisible(true);
    }

    private boolean exist(String username, String rol) {
        boolean exist = false;
        for (Usuario usuario : usuarios) {
            if (usuario.getUsuario().equals(username)
                    && usuario.getRol().equals(rol)) {
                exist = true;
            }
        }
        return exist;
    }

    private void searchUser() {
        String user = jtfUsuario.getText().trim();
        String rol = jcRol.getSelectedItem().toString();
        if (jcRol.getSelectedIndex() != 0) {

            int counter = -1;
            for (Usuario usuario : usuarios) {
                counter++;

                if (usuario.getUsuario().equals(user) && usuario.getRol().equals(rol)) {
                    System.out.println("666");
                    this.indexUser = counter;
                    jtfName.setText(usuario.getNombre());
                    jtfId.setText(usuario.getId() + "");
                    jbUpdate.setEnabled(true);
                    jlError.setText("");
                    break;
                } else {
                    jlError.setText("El usuario no existe");
                }
            }
        } else {
            jlError.setText("Debe escribir un nombre de usuario y seleccionar un  rol ");
        }

    }

    private void clearFields() {
        jtfId.setText("");
        jtfName.setText("");
        jtfUsuario.setText("");
        jpfPass.setText("");
        jpfPassB.setText("");
        jlError.setText("Usuario actualizado.");
    }

}
